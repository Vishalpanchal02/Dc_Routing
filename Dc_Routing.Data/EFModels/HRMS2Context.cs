// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Dc_Routing.Data.EFModels;

public partial class HRMS2Context : DbContext
{
    public HRMS2Context(DbContextOptions<HRMS2Context> options)
        : base(options)
    {
    }

    public virtual DbSet<ApprovalStatusMaster> ApprovalStatusMasters { get; set; }

    public virtual DbSet<AssignLocationHistory> AssignLocationHistories { get; set; }

    public virtual DbSet<BulkEmployeeMaster> BulkEmployeeMasters { get; set; }

    public virtual DbSet<BulkEmployeeMasternew> BulkEmployeeMasternews { get; set; }

    public virtual DbSet<BulkEmployeeMasternewnew> BulkEmployeeMasternewnews { get; set; }

    public virtual DbSet<BulkRegionMaster> BulkRegionMasters { get; set; }

    public virtual DbSet<Bulkorgdatum> Bulkorgdata { get; set; }

    public virtual DbSet<Candidate> Candidates { get; set; }

    public virtual DbSet<CandidateStatus> CandidateStatuses { get; set; }

    public virtual DbSet<CandidateStatusHistory> CandidateStatusHistories { get; set; }

    public virtual DbSet<CanidateDoc> CanidateDocs { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<DtTemp> DtTemps { get; set; }

    public virtual DbSet<EmployeeDoc> EmployeeDocs { get; set; }

    public virtual DbSet<Empwithereportingheadcode> Empwithereportingheadcodes { get; set; }

    public virtual DbSet<Hhbh> Hhbhs { get; set; }

    public virtual DbSet<InsuranceEnrollment> InsuranceEnrollments { get; set; }

    public virtual DbSet<InterviewRound> InterviewRounds { get; set; }

    public virtual DbSet<Interviewer> Interviewers { get; set; }

    public virtual DbSet<Jd> Jds { get; set; }

    public virtual DbSet<Newemployeemastertemp> Newemployeemastertemps { get; set; }

    public virtual DbSet<Newemployeemastertemp1> Newemployeemastertemps1 { get; set; }

    public virtual DbSet<ShiftSchedule> ShiftSchedules { get; set; }

    public virtual DbSet<StagingEmployee> StagingEmployees { get; set; }

    public virtual DbSet<StagingEmployee1> StagingEmployees1 { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Store> Stores { get; set; }

    public virtual DbSet<StoreLocation> StoreLocations { get; set; }

    public virtual DbSet<StoreMasterBulk> StoreMasterBulks { get; set; }

    public virtual DbSet<TblAttendanceApproval> TblAttendanceApprovals { get; set; }

    public virtual DbSet<TblAttendanceRegularizationRequest> TblAttendanceRegularizationRequests { get; set; }

    public virtual DbSet<TblCompOffRequest> TblCompOffRequests { get; set; }

    public virtual DbSet<TblCompany> TblCompanies { get; set; }

    public virtual DbSet<TblDcattendance> TblDcattendances { get; set; }

    public virtual DbSet<TblDcemployee> TblDcemployees { get; set; }

    public virtual DbSet<TblDepartment> TblDepartments { get; set; }

    public virtual DbSet<TblDesignation> TblDesignations { get; set; }

    public virtual DbSet<TblEmpAttendance> TblEmpAttendances { get; set; }

    public virtual DbSet<TblEmployee> TblEmployees { get; set; }

    public virtual DbSet<TblEmployeeActiveInActiveHistory> TblEmployeeActiveInActiveHistories { get; set; }

    public virtual DbSet<TblEmployeeLeaveBalance> TblEmployeeLeaveBalances { get; set; }

    public virtual DbSet<TblEmployeeMultiPunch> TblEmployeeMultiPunches { get; set; }

    public virtual DbSet<TblEmployeeMultiPunchesBackup03062025> TblEmployeeMultiPunchesBackup03062025s { get; set; }

    public virtual DbSet<TblEmployeeMultiPunchesCleaned> TblEmployeeMultiPunchesCleaneds { get; set; }

    public virtual DbSet<TblEmployeeMultiPunchesTemp> TblEmployeeMultiPunchesTemps { get; set; }

    public virtual DbSet<TblEmployeePunch> TblEmployeePunches { get; set; }

    public virtual DbSet<TblEmployeeRole> TblEmployeeRoles { get; set; }

    public virtual DbSet<TblExperience> TblExperiences { get; set; }

    public virtual DbSet<TblFamily> TblFamilies { get; set; }

    public virtual DbSet<TblLeavePolicy> TblLeavePolicies { get; set; }

    public virtual DbSet<TblLeaveRequest> TblLeaveRequests { get; set; }

    public virtual DbSet<TblLeaveType> TblLeaveTypes { get; set; }

    public virtual DbSet<TblLocation> TblLocations { get; set; }

    public virtual DbSet<TblManualDeleteNikhil> TblManualDeleteNikhils { get; set; }

    public virtual DbSet<TblNewCandidateApproval> TblNewCandidateApprovals { get; set; }

    public virtual DbSet<TblQualification> TblQualifications { get; set; }

    public virtual DbSet<TblRegion> TblRegions { get; set; }

    public virtual DbSet<TblRole> TblRoles { get; set; }

    public virtual DbSet<TblState> TblStates { get; set; }

    public virtual DbSet<TblStatus> TblStatuses { get; set; }

    public virtual DbSet<TblStoreBudget> TblStoreBudgets { get; set; }

    public virtual DbSet<TblTravelRequest> TblTravelRequests { get; set; }

    public virtual DbSet<TempEcode> TempEcodes { get; set; }

    public virtual DbSet<TempEmpAttendance> TempEmpAttendances { get; set; }

    public virtual DbSet<TempEmployeePunch> TempEmployeePunches { get; set; }

    public virtual DbSet<TmpEmployeeUpdate> TmpEmployeeUpdates { get; set; }

    public virtual DbSet<TravelMode> TravelModes { get; set; }

    public virtual DbSet<TravelRequest> TravelRequests { get; set; }

    public virtual DbSet<TravelRequestAction> TravelRequestActions { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ApprovalStatusMaster>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__Approval__C8EE20631EDE78A1");

            entity.ToTable("ApprovalStatusMaster");

            entity.HasIndex(e => e.StatusName, "UQ__Approval__05E7698AC7CC9C66").IsUnique();

            entity.Property(e => e.StatusId).ValueGeneratedNever();
            entity.Property(e => e.StatusName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssignLocationHistory>(entity =>
        {
            entity.ToTable("AssignLocationHistory");

            entity.Property(e => e.AssignedOnDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AssignedReason)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(false);
            entity.Property(e => e.ReleasedOnDate).HasColumnType("datetime");

            entity.HasOne(d => d.AssignedLocationNavigation).WithMany(p => p.AssignLocationHistories)
                .HasForeignKey(d => d.AssignedLocation)
                .HasConstraintName("FK__AssignLoc__Assig__640DD89F");

            entity.HasOne(d => d.Candidate).WithMany(p => p.AssignLocationHistories)
                .HasForeignKey(d => d.CandidateId)
                .HasConstraintName("FK__AssignLoc__Candi__6319B466");
        });

        modelBuilder.Entity<BulkEmployeeMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BulkEmployeeMaster");

            entity.Property(e => e.ACNo).HasColumnName("A/C NO");
            entity.Property(e => e.AadharNo).HasColumnName("AADHAR NO");
            entity.Property(e => e.BankIfscCode).HasColumnName("BANK IFSC CODE");
            entity.Property(e => e.BankName).HasColumnName("BANK NAME");
            entity.Property(e => e.Company1).HasColumnName("COMPANY 1");
            entity.Property(e => e.Company2).HasColumnName("COMPANY 2");
            entity.Property(e => e.Company3).HasColumnName("COMPANY 3");
            entity.Property(e => e.Contact1OfLast3Company).HasColumnName("CONTACT1 OF LAST 3 COMPANY");
            entity.Property(e => e.Contact2OfLast3Company1).HasColumnName("CONTACT2 OF LAST 3 COMPANY1");
            entity.Property(e => e.Contact3OfLast3Company11).HasColumnName("CONTACT3 OF LAST 3 COMPANY11");
            entity.Property(e => e.Contact4OfLast3Company11).HasColumnName("CONTACT4 OF LAST 3 COMPANY11");
            entity.Property(e => e.Contact5OfLast3Company111).HasColumnName("CONTACT5 OF LAST 3 COMPANY111");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Doj).HasColumnName("DOJ");
            entity.Property(e => e.Ecode1).HasColumnName("Ecode_1");
            entity.Property(e => e.EmailAddress).HasColumnName("EMAIL ADDRESS");
            entity.Property(e => e.FamilyMemberDob).HasColumnName("FAMILY MEMBER DOB");
            entity.Property(e => e.FamilyMemberName).HasColumnName("FAMILY MEMBER Name");
            entity.Property(e => e.FamilyMemberRelation).HasColumnName("FAMILY MEMBER Relation");
            entity.Property(e => e.FatherSName).HasColumnName("FATHER'S NAME");
            entity.Property(e => e.FullName).HasColumnName("FULL NAME");
            entity.Property(e => e.Gender).HasColumnName("GENDER");
            entity.Property(e => e.HighestQualification).HasColumnName("HIGHEST QUALIFICATION");
            entity.Property(e => e.InHandSalary).HasColumnName("In Hand Salary");
            entity.Property(e => e.Isresgined).HasColumnName("isresgined");
            entity.Property(e => e.LastCtcAnnual).HasColumnName("LAST CTC(ANNUAL)");
            entity.Property(e => e.MaritialStatus).HasColumnName("MARITIAL STATUS");
            entity.Property(e => e.Mobile).HasColumnName("MOBILE");
            entity.Property(e => e.Mobile2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MOBILE2");
            entity.Property(e => e.MotherSName).HasColumnName("MOTHER'S NAME");
            entity.Property(e => e.NameOnAdhar).HasColumnName("NAME ON ADHAR");
            entity.Property(e => e.Nationality).HasColumnName("NATIONALITY");
            entity.Property(e => e.PanNo).HasColumnName("PAN NO");
            entity.Property(e => e.PasportSizePhoto).HasColumnName("PASPORT SIZE PHOTO");
            entity.Property(e => e.PermanentAddress).HasColumnName("PERMANENT ADDRESS");
            entity.Property(e => e.PlaceOfBirth).HasColumnName("PLACE OF BIRTH");
            entity.Property(e => e.PositionHeldInPreviousCompany).HasColumnName("POSITION HELD IN PREVIOUS COMPANY");
            entity.Property(e => e.PresentAddress).HasColumnName("PRESENT ADDRESS");
            entity.Property(e => e.PresentAddressPinCode).HasColumnName("PRESENT ADDRESS PIN CODE");
            entity.Property(e => e.Reference1OfLast3Company).HasColumnName("REFERENCE1  OF LAST 3 COMPANY");
            entity.Property(e => e.Reference2OfLast3Company1).HasColumnName("REFERENCE2  OF LAST 3 COMPANY1");
            entity.Property(e => e.Reference3OfLast3Company11).HasColumnName("REFERENCE3  OF LAST 3 COMPANY11");
            entity.Property(e => e.Reference4OfLast3Company11).HasColumnName("REFERENCE4  OF LAST 3 COMPANY11");
            entity.Property(e => e.Reference5OfLast3Company111).HasColumnName("REFERENCE5  OF LAST 3 COMPANY111");
            entity.Property(e => e.Religion).HasColumnName("RELIGION");
            entity.Property(e => e.Title).HasColumnName("TITLE");
            entity.Property(e => e.WorkLocation).HasColumnName("WORK LOCATION");
        });

        modelBuilder.Entity<BulkEmployeeMasternew>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BulkEmployeeMasternew");

            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Doj).HasColumnName("DOJ");
            entity.Property(e => e.Fullname).HasColumnName("FULLNAME");
            entity.Property(e => e.Gender).HasColumnName("GENDER");
        });

        modelBuilder.Entity<BulkEmployeeMasternewnew>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BulkEmployeeMasternewnew");

            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Doj).HasColumnName("DOJ");
            entity.Property(e => e.Fullname).HasColumnName("FULLNAME");
            entity.Property(e => e.Gender).HasColumnName("GENDER");
        });

        modelBuilder.Entity<BulkRegionMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BulkRegionMaster");

            entity.Property(e => e.Stcode).HasColumnName("STCode");
        });

        modelBuilder.Entity<Bulkorgdatum>(entity =>
        {
            entity.HasNoKey();
        });

        modelBuilder.Entity<Candidate>(entity =>
        {
            entity.ToTable("Candidate");

            entity.HasIndex(e => e.IsActive, "IX_Candidate_IsActive");

            entity.HasIndex(e => new { e.IsActive, e.StatusId }, "IX_Candidate_IsActive_Status");

            entity.HasIndex(e => e.Id, "IX_Candidate_id").IsUnique();

            entity.HasIndex(e => e.IsApplicant, "IX_Candidates_isApplicant");

            entity.Property(e => e.ACNo).HasColumnName("A/C NO");
            entity.Property(e => e.AadharNo).HasColumnName("AADHAR NO");
            entity.Property(e => e.AnnuallyNetCtc)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("annuallyNetCTC");
            entity.Property(e => e.ApplicantCode).HasColumnName("APPLICANT CODE");
            entity.Property(e => e.ApplicantId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankIfscCode).HasColumnName("BANK IFSC CODE");
            entity.Property(e => e.BankName).HasColumnName("BANK NAME");
            entity.Property(e => e.BasicSalary).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BeneficiaryAddress).HasColumnName("BENEFICIARY ADDRESS");
            entity.Property(e => e.Cca)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CCA");
            entity.Property(e => e.Company1).HasColumnName("COMPANY 1");
            entity.Property(e => e.Company2).HasColumnName("COMPANY 2");
            entity.Property(e => e.Company3).HasColumnName("COMPANY 3");
            entity.Property(e => e.Contact1OfLast3Company).HasColumnName("CONTACT1 OF LAST 3 COMPANY");
            entity.Property(e => e.Contact2OfLast3Company).HasColumnName("CONTACT2 OF LAST 3 COMPANY");
            entity.Property(e => e.Contact3OfLast3Company).HasColumnName("CONTACT3 OF LAST 3 COMPANY");
            entity.Property(e => e.Contact4OfLast3Company).HasColumnName("CONTACT4 OF LAST 3 COMPANY");
            entity.Property(e => e.Contact5OfLast3Company).HasColumnName("CONTACT5 OF LAST 3 COMPANY");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Da)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DA");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Designation).HasColumnName("DESIGNATION");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.EmailAddress).HasColumnName("EMAIL ADDRESS");
            entity.Property(e => e.EmpCode).HasColumnName("EMP CODE");
            entity.Property(e => e.Esicapplicable).HasColumnName("ESICApplicable");
            entity.Property(e => e.ExtraAllowance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FamilyMemberDob).HasColumnName("FAMILY MEMBER DOB");
            entity.Property(e => e.FamilyMemberName).HasColumnName("FAMILY MEMBER Name");
            entity.Property(e => e.FamilyMemberRelation).HasColumnName("FAMILY MEMBER Relation");
            entity.Property(e => e.FatherName).HasColumnName("FATHER NAME");
            entity.Property(e => e.FirstName).HasColumnName("FIRST NAME");
            entity.Property(e => e.Gender).HasColumnName("GENDER");
            entity.Property(e => e.GrossSalary)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GROSS SALARY");
            entity.Property(e => e.HighestQualification).HasColumnName("HIGHEST QUALIFICATION");
            entity.Property(e => e.Hra)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HRA");
            entity.Property(e => e.HusbandName).HasColumnName("HUSBAND NAME");
            entity.Property(e => e.InHandSalary).HasColumnName("In Hand Salary");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsResumeUploaded).HasDefaultValue(false);
            entity.Property(e => e.Isrelativeincompany).HasColumnName("ISRELATIVEINCOMPANY");
            entity.Property(e => e.JoiningDate)
                .HasColumnType("datetime")
                .HasColumnName("JOINING DATE");
            entity.Property(e => e.LastCtcAnnual).HasColumnName("LAST CTC(ANNUAL)");
            entity.Property(e => e.LastName).HasColumnName("LAST NAME");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.MaritialStatus).HasColumnName("MARITIAL STATUS");
            entity.Property(e => e.MiddleName).HasColumnName("MIDDLE NAME");
            entity.Property(e => e.Mobile).HasColumnName("MOBILE");
            entity.Property(e => e.MonthlyGrossCtc)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("monthlyGrossCTC");
            entity.Property(e => e.MotherName).HasColumnName("MOTHER NAME");
            entity.Property(e => e.NameOnAadhar).HasColumnName("NAME ON AADHAR");
            entity.Property(e => e.Nationality).HasColumnName("NATIONALITY");
            entity.Property(e => e.PanNo).HasColumnName("PAN NO");
            entity.Property(e => e.PermanentAddress).HasColumnName("PERMANENT ADDRESS");
            entity.Property(e => e.PermanentAddressPinCode).HasColumnName("[PERMANENT ADDRESS PIN CODE");
            entity.Property(e => e.Pfapplicable).HasColumnName("PFApplicable");
            entity.Property(e => e.PlaceOfBirth).HasColumnName("PLACE OF BIRTH");
            entity.Property(e => e.PositionHeldInPreviousCompany).HasColumnName("POSITION HELD IN PREVIOUS COMPANY");
            entity.Property(e => e.PresentAddress).HasColumnName("PRESENT ADDRESS");
            entity.Property(e => e.PresentAddressPinCode).HasColumnName("PRESENT ADDRESS PIN CODE");
            entity.Property(e => e.PrevEstNo).HasColumnName("PREV. EST NO.");
            entity.Property(e => e.Reference).HasColumnName("REFERENCE");
            entity.Property(e => e.Reference1OfLast3Company).HasColumnName("REFERENCE1  OF LAST 3 COMPANY");
            entity.Property(e => e.Reference2OfLast3Company).HasColumnName("REFERENCE2  OF LAST 3 COMPANY");
            entity.Property(e => e.Reference3OfLast3Company).HasColumnName("REFERENCE3  OF LAST 3 COMPANY");
            entity.Property(e => e.Reference4OfLast3Company).HasColumnName("REFERENCE4  OF LAST 3 COMPANY");
            entity.Property(e => e.Reference5OfLast3Company).HasColumnName("REFERENCE5  OF LAST 3 COMPANY");
            entity.Property(e => e.Religion).HasColumnName("RELIGION");
            entity.Property(e => e.ReportHeadEcode).HasMaxLength(50);
            entity.Property(e => e.SalaryExpectation).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SpecialAllowance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Title).HasColumnName("TITLE");
            entity.Property(e => e.TotalExperience).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UanNo).HasColumnName("UAN NO");
            entity.Property(e => e.Udf1).HasColumnName("udf1");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.WeeklyOff).HasColumnName("WEEKLY OFF");
            entity.Property(e => e.WorkLocation).HasColumnName("WORK LOCATION");

            entity.HasOne(d => d.Status).WithMany(p => p.Candidates)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_Status");
        });

        modelBuilder.Entity<CandidateStatus>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__Candidat__C8EE20637B8EFB90");

            entity.ToTable("CandidateStatus");

            entity.Property(e => e.StatusName).HasMaxLength(50);
        });

        modelBuilder.Entity<CandidateStatusHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__Candidat__4D7B4ABD73CD6A71");

            entity.ToTable("CandidateStatusHistory");

            entity.Property(e => e.CallResponse).HasMaxLength(500);
            entity.Property(e => e.Hrname)
                .HasMaxLength(50)
                .HasColumnName("HRName");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Candidate).WithMany(p => p.CandidateStatusHistories)
                .HasForeignKey(d => d.CandidateId)
                .HasConstraintName("FK__Candidate__Candi__0C1BC9F9");

            entity.HasOne(d => d.Status).WithMany(p => p.CandidateStatusHistories)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK__Candidate__Statu__0D0FEE32");
        });

        modelBuilder.Entity<CanidateDoc>(entity =>
        {
            entity.Property(e => e.Cid).HasColumnName("CId");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("PK__City__F2D21B76B9F37643");

            entity.ToTable("City");

            entity.Property(e => e.CityName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.State).WithMany(p => p.Cities)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__City__StateId__0F2D40CE");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryId).HasName("PK__Country__10D1609FEA8BEFCA");

            entity.ToTable("Country");

            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DtTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DtTemp");

            entity.Property(e => e.Ecode)
                .HasMaxLength(100)
                .HasColumnName("ECode");
            entity.Property(e => e.Rcode)
                .HasMaxLength(100)
                .HasColumnName("RCode");
        });

        modelBuilder.Entity<EmployeeDoc>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Employee__3214EC0737E3FD0A");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Employee).WithMany(p => p.EmployeeDocs)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FileRecords_Employee");
        });

        modelBuilder.Entity<Empwithereportingheadcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EMPWITHEREPORTINGHEADCODE");
        });

        modelBuilder.Entity<Hhbh>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("hhbh");

            entity.Property(e => e.Doj).HasColumnName("doj");
            entity.Property(e => e.Dol).HasColumnName("dol");
            entity.Property(e => e.Ecode).HasColumnName("ecode");
            entity.Property(e => e.Ename).HasColumnName("ename");
        });

        modelBuilder.Entity<InsuranceEnrollment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InsuranceEnrollment");

            entity.Property(e => e.EmployeeId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrossSalary).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.NameofInsured)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Relation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InterviewRound>(entity =>
        {
            entity.HasKey(e => e.RoundId).HasName("PK__Intervie__94D84DFA7BB14F84");

            entity.Property(e => e.Level).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(500);
            entity.Property(e => e.RoundName).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(50);

            entity.HasOne(d => d.Candidate).WithMany(p => p.InterviewRounds)
                .HasForeignKey(d => d.CandidateId)
                .HasConstraintName("FK__Interview__Candi__0FEC5ADD");
        });

        modelBuilder.Entity<Interviewer>(entity =>
        {
            entity.HasKey(e => e.InterviewerId).HasName("PK__Intervie__C29BDA1D71FAFE4F");

            entity.ToTable("Interviewer");

            entity.Property(e => e.Feedback).HasMaxLength(500);
            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasOne(d => d.Round).WithMany(p => p.Interviewers)
                .HasForeignKey(d => d.RoundId)
                .HasConstraintName("FK__Interview__Round__12C8C788");
        });

        modelBuilder.Entity<Jd>(entity =>
        {
            entity.HasKey(e => e.Jdid).HasName("PK__JD__00350037561CB51E");

            entity.ToTable("JD");

            entity.Property(e => e.Jdid).HasColumnName("JDId");
            entity.Property(e => e.KeyResponsibility).HasColumnType("text");
            entity.Property(e => e.KeySkills).HasColumnType("text");

            entity.HasOne(d => d.Designation).WithMany(p => p.Jds)
                .HasForeignKey(d => d.DesignationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__JD__DesignationI__178D7CA5");
        });

        modelBuilder.Entity<Newemployeemastertemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("newemployeemastertemp");

            entity.Property(e => e.ACNo).HasColumnName("A/c No.");
            entity.Property(e => e.AadharNo).HasColumnName("Aadhar No.");
            entity.Property(e => e.AcNo2).HasColumnName("AC NO.2");
            entity.Property(e => e.AcNo21).HasColumnName("AC NO.21");
            entity.Property(e => e.AccomodationDetails).HasColumnName("Accomodation Details");
            entity.Property(e => e.AnnualCtc).HasColumnName("Annual CTC");
            entity.Property(e => e.AnnualGross).HasColumnName("Annual Gross");
            entity.Property(e => e.BasicSalary).HasColumnName("Basic Salary");
            entity.Property(e => e.BonusExGratia).HasColumnName("Bonus/Ex-Gratia");
            entity.Property(e => e.BooksPeriodicals).HasColumnName("Books & Periodicals");
            entity.Property(e => e.Branch).HasColumnName("branch");
            entity.Property(e => e.CCA).HasColumnName("C.C.A.");
            entity.Property(e => e.CashShort).HasColumnName("Cash Short");
            entity.Property(e => e.Cca1).HasColumnName("Cca");
            entity.Property(e => e.ChildDob).HasColumnName("CHILD DOB");
            entity.Property(e => e.ChildDob1).HasColumnName("CHILD DOB_1");
            entity.Property(e => e.ChildName).HasColumnName("CHILD NAME");
            entity.Property(e => e.ChildName1).HasColumnName("CHILD NAME_1");
            entity.Property(e => e.DA).HasColumnName("D.A.");
            entity.Property(e => e.DOB).HasColumnName("D.O.B.");
            entity.Property(e => e.DOJ).HasColumnName("D.O.J.");
            entity.Property(e => e.DOJGroup).HasColumnName("D.O.J.Group");
            entity.Property(e => e.DOL).HasColumnName("D.O.L.");
            entity.Property(e => e.DateOfConfirmation).HasColumnName("Date of Confirmation");
            entity.Property(e => e.DesigBand).HasColumnName("Desig. Band");
            entity.Property(e => e.DieselDeduction).HasColumnName("Diesel Deduction");
            entity.Property(e => e.DriverWages).HasColumnName("Driver Wages");
            entity.Property(e => e.ESIApplicable).HasColumnName("E.S.I. Applicable?");
            entity.Property(e => e.ESINo).HasColumnName("E.S.I. No.");
            entity.Property(e => e.EmailId).HasColumnName("Email Id");
            entity.Property(e => e.EmployeeCode).HasColumnName("Employee Code");
            entity.Property(e => e.EmployeerEsi).HasColumnName("Employeer ESI");
            entity.Property(e => e.EmployeerPf).HasColumnName("Employeer PF");
            entity.Property(e => e.Empstatus).HasColumnName("empstatus");
            entity.Property(e => e.ExtraAllowance).HasColumnName("Extra Allowance");
            entity.Property(e => e.FatherDob).HasColumnName("FATHER DOB");
            entity.Property(e => e.FatherSName).HasColumnName("Father's Name");
            entity.Property(e => e.FoodingAllowance).HasColumnName("Fooding Allowance");
            entity.Property(e => e.FoodingDetails).HasColumnName("Fooding Details");
            entity.Property(e => e.FuelMaintenance).HasColumnName("Fuel & Maintenance");
            entity.Property(e => e.Gratity).HasColumnName("GRATITY");
            entity.Property(e => e.GrossSalary).HasColumnName("Gross Salary");
            entity.Property(e => e.GrossSalary1).HasColumnName("Gross Salary_1");
            entity.Property(e => e.HRA).HasColumnName("H.R.A.");
            entity.Property(e => e.Hod).HasColumnName("hod");
            entity.Property(e => e.HoldReasonRemark).HasColumnName("Hold Reason/Remark");
            entity.Property(e => e.HoldSalary).HasColumnName("Hold Salary ?");
            entity.Property(e => e.HomeTown).HasColumnName("Home Town");
            entity.Property(e => e.Icustomer).HasColumnName("icustomer");
            entity.Property(e => e.IfscCode).HasColumnName("IFSC Code");
            entity.Property(e => e.IncPaid).HasColumnName("Inc.Paid");
            entity.Property(e => e.Jbname).HasColumnName("jbname");
            entity.Property(e => e.Jobprofile).HasColumnName("jobprofile");
            entity.Property(e => e.JoinedLocation).HasColumnName("Joined Location");
            entity.Property(e => e.JoiningSalary).HasColumnName("Joining Salary");
            entity.Property(e => e.Junior).HasColumnName("junior");
            entity.Property(e => e.LWF).HasColumnName("L.W.F.");
            entity.Property(e => e.LeaveEncashment).HasColumnName("Leave Encashment");
            entity.Property(e => e.LicNo).HasColumnName("LIC No.");
            entity.Property(e => e.Lwf1).HasColumnName("Lwf");
            entity.Property(e => e.MaritalStatus).HasColumnName("Marital Status");
            entity.Property(e => e.MealVoucher).HasColumnName("Meal Voucher");
            entity.Property(e => e.MedicalAllowance).HasColumnName("Medical Allowance");
            entity.Property(e => e.MedicalReim).HasColumnName("Medical Reim");
            entity.Property(e => e.MediclaimNo).HasColumnName("Mediclaim No.");
            entity.Property(e => e.MobNo).HasColumnName("Mob No.");
            entity.Property(e => e.MonthlyCtc).HasColumnName("MONTHLY CTC.");
            entity.Property(e => e.MotherDob).HasColumnName("MOTHER DOB");
            entity.Property(e => e.MothersName).HasColumnName("Mothers Name");
            entity.Property(e => e.NameOfBank).HasColumnName("Name of Bank");
            entity.Property(e => e.NameOfEmployee).HasColumnName("Name of Employee");
            entity.Property(e => e.NoticeDays).HasColumnName("Notice Days");
            entity.Property(e => e.PAPolicyNo).HasColumnName("P.A.policy no.");
            entity.Property(e => e.PFApplicable).HasColumnName("P.F. Applicable?");
            entity.Property(e => e.PFCode).HasColumnName("P.F. Code?");
            entity.Property(e => e.PFNo).HasColumnName("P.F. No.");
            entity.Property(e => e.PTax).HasColumnName("P.Tax");
            entity.Property(e => e.PanNo).HasColumnName("PAN No.");
            entity.Property(e => e.PassportNo).HasColumnName("Passport No.");
            entity.Property(e => e.PaymentMode).HasColumnName("Payment Mode");
            entity.Property(e => e.PermanentAddess).HasColumnName("Permanent Addess");
            entity.Property(e => e.PhoneNo).HasColumnName("Phone No.");
            entity.Property(e => e.PostedLocation).HasColumnName("Posted Location");
            entity.Property(e => e.PresentAddress).HasColumnName("Present Address");
            entity.Property(e => e.PreviousPFNo).HasColumnName("Previous P.F. No.");
            entity.Property(e => e.ProfessionalAttire).HasColumnName("Professional Attire");
            entity.Property(e => e.ReimbursementACNo).HasColumnName("Reimbursement A/c No.");
            entity.Property(e => e.ReimbursementBank).HasColumnName("Reimbursement Bank");
            entity.Property(e => e.Relation1).HasColumnName("Relation_1");
            entity.Property(e => e.Relation2).HasColumnName("Relation_2");
            entity.Property(e => e.ResignationDate).HasColumnName("Resignation Date");
            entity.Property(e => e.Rmanager).HasColumnName("rmanager");
            entity.Property(e => e.SalStructure).HasColumnName("Sal Structure");
            entity.Property(e => e.Sdsgrade).HasColumnName("sdsgrade");
            entity.Property(e => e.Senior).HasColumnName("senior");
            entity.Property(e => e.SpecialAllowance).HasColumnName("Special Allowance");
            entity.Property(e => e.SpouseDob).HasColumnName("SPOUSE DOB");
            entity.Property(e => e.States).HasColumnName("states");
            entity.Property(e => e.Subdesig).HasColumnName("subdesig");
            entity.Property(e => e.TDS1).HasColumnName("T.D.S.");
            entity.Property(e => e.Trfrdate).HasColumnName("trfrdate");
            entity.Property(e => e.Trfreason).HasColumnName("trfreason");
            entity.Property(e => e.Trfremark).HasColumnName("trfremark");
            entity.Property(e => e.UniversalACNumber).HasColumnName("Universal A/c Number");
        });

        modelBuilder.Entity<Newemployeemastertemp1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("newemployeemastertemps");

            entity.Property(e => e.ACNo).HasColumnName("A/c No.");
            entity.Property(e => e.AadharNo).HasColumnName("Aadhar No.");
            entity.Property(e => e.AcNo2).HasColumnName("AC NO.2");
            entity.Property(e => e.AcNo21).HasColumnName("AC NO.21");
            entity.Property(e => e.AccomodationDetails).HasColumnName("Accomodation Details");
            entity.Property(e => e.AnnualCtc).HasColumnName("Annual CTC");
            entity.Property(e => e.AnnualGross).HasColumnName("Annual Gross");
            entity.Property(e => e.BasicSalary).HasColumnName("Basic Salary");
            entity.Property(e => e.BonusExGratia).HasColumnName("Bonus/Ex-Gratia");
            entity.Property(e => e.BooksPeriodicals).HasColumnName("Books & Periodicals");
            entity.Property(e => e.CCA).HasColumnName("C.C.A.");
            entity.Property(e => e.Cca1).HasColumnName("Cca");
            entity.Property(e => e.ChildDob).HasColumnName("CHILD DOB");
            entity.Property(e => e.ChildDob1).HasColumnName("CHILD DOB_1");
            entity.Property(e => e.ChildName).HasColumnName("CHILD NAME");
            entity.Property(e => e.ChildName1).HasColumnName("CHILD NAME_1");
            entity.Property(e => e.DA).HasColumnName("D.A.");
            entity.Property(e => e.DOB).HasColumnName("D.O.B.");
            entity.Property(e => e.DOJ).HasColumnName("D.O.J.");
            entity.Property(e => e.DOJGroup).HasColumnName("D.O.J.Group");
            entity.Property(e => e.DOL).HasColumnName("D.O.L.");
            entity.Property(e => e.DateOfConfirmation).HasColumnName("Date of Confirmation");
            entity.Property(e => e.DesigBand).HasColumnName("Desig. Band");
            entity.Property(e => e.DriverWages).HasColumnName("Driver Wages");
            entity.Property(e => e.ESIApplicable).HasColumnName("E.S.I. Applicable?");
            entity.Property(e => e.ESINo).HasColumnName("E.S.I. No.");
            entity.Property(e => e.EmailId).HasColumnName("Email Id");
            entity.Property(e => e.EmployeeCode).HasColumnName("Employee Code");
            entity.Property(e => e.EmployeeStatus).HasColumnName("Employee Status");
            entity.Property(e => e.EmployeerEsi).HasColumnName("Employeer ESI");
            entity.Property(e => e.EmployeerPf).HasColumnName("Employeer PF");
            entity.Property(e => e.ExtraAllow).HasColumnName("Extra Allow");
            entity.Property(e => e.FatherDob).HasColumnName("FATHER DOB");
            entity.Property(e => e.FatherSName).HasColumnName("Father's Name");
            entity.Property(e => e.FoodingAllow).HasColumnName("Fooding Allow");
            entity.Property(e => e.FoodingDetails).HasColumnName("Fooding Details");
            entity.Property(e => e.FuelMaintenance).HasColumnName("Fuel & Maintenance");
            entity.Property(e => e.Gratity).HasColumnName("GRATITY");
            entity.Property(e => e.GrossSalary).HasColumnName("Gross Salary");
            entity.Property(e => e.GrossSalary1).HasColumnName("Gross Salary_1");
            entity.Property(e => e.HRA).HasColumnName("H.R.A.");
            entity.Property(e => e.Hod).HasColumnName("hod");
            entity.Property(e => e.HoldReasonRemark).HasColumnName("Hold Reason/Remark");
            entity.Property(e => e.HoldSalary).HasColumnName("Hold Salary ?");
            entity.Property(e => e.HomeTown).HasColumnName("Home Town");
            entity.Property(e => e.Icustomer).HasColumnName("icustomer");
            entity.Property(e => e.IfscCode).HasColumnName("IFSC Code");
            entity.Property(e => e.Jbname).HasColumnName("jbname");
            entity.Property(e => e.Jobprofile).HasColumnName("jobprofile");
            entity.Property(e => e.JoinedLocation).HasColumnName("Joined Location");
            entity.Property(e => e.JoiningSalary).HasColumnName("Joining Salary");
            entity.Property(e => e.Junior).HasColumnName("junior");
            entity.Property(e => e.LeaveEncashment).HasColumnName("Leave Encashment");
            entity.Property(e => e.LicNo).HasColumnName("LIC No.");
            entity.Property(e => e.MaritalStatus).HasColumnName("Marital Status");
            entity.Property(e => e.MealVoucher).HasColumnName("Meal Voucher");
            entity.Property(e => e.MedicalAllow).HasColumnName("Medical Allow");
            entity.Property(e => e.MediclaimNo).HasColumnName("Mediclaim No.");
            entity.Property(e => e.MobNo).HasColumnName("Mob No.");
            entity.Property(e => e.MonthlyCtc).HasColumnName("MONTHLY CTC.");
            entity.Property(e => e.MotherDob).HasColumnName("MOTHER DOB");
            entity.Property(e => e.MothersName).HasColumnName("Mothers Name");
            entity.Property(e => e.NameOfBank).HasColumnName("Name of Bank");
            entity.Property(e => e.NameOfEmployee).HasColumnName("Name of Employee");
            entity.Property(e => e.NoticeDays).HasColumnName("Notice Days");
            entity.Property(e => e.PAPolicyNo).HasColumnName("P.A.policy no.");
            entity.Property(e => e.PFApplicable).HasColumnName("P.F. Applicable?");
            entity.Property(e => e.PFCode).HasColumnName("P.F. Code?");
            entity.Property(e => e.PFNo).HasColumnName("P.F. No.");
            entity.Property(e => e.PanNo).HasColumnName("PAN No.");
            entity.Property(e => e.PassportNo).HasColumnName("Passport No.");
            entity.Property(e => e.PaymentMode).HasColumnName("Payment Mode");
            entity.Property(e => e.PermanentAddess).HasColumnName("Permanent Addess");
            entity.Property(e => e.PhoneNo).HasColumnName("Phone No.");
            entity.Property(e => e.PostedLocation).HasColumnName("Posted Location");
            entity.Property(e => e.PresentAddress).HasColumnName("Present Address");
            entity.Property(e => e.PreviousPFNo).HasColumnName("Previous P.F. No.");
            entity.Property(e => e.ProfessionalAttire).HasColumnName("Professional Attire");
            entity.Property(e => e.ReimbursementACNo).HasColumnName("Reimbursement A/c No.");
            entity.Property(e => e.ReimbursementBank).HasColumnName("Reimbursement Bank");
            entity.Property(e => e.Relation1).HasColumnName("Relation_1");
            entity.Property(e => e.Relation2).HasColumnName("Relation_2");
            entity.Property(e => e.ResignationDate).HasColumnName("Resignation Date");
            entity.Property(e => e.Rmanager).HasColumnName("rmanager");
            entity.Property(e => e.SalStructure).HasColumnName("Sal Structure");
            entity.Property(e => e.Sdsgrade).HasColumnName("sdsgrade");
            entity.Property(e => e.Senior).HasColumnName("senior");
            entity.Property(e => e.SpecialAllow).HasColumnName("Special Allow");
            entity.Property(e => e.SpouseDob).HasColumnName("SPOUSE DOB");
            entity.Property(e => e.States).HasColumnName("states");
            entity.Property(e => e.Subdesig).HasColumnName("subdesig");
            entity.Property(e => e.TDS1).HasColumnName("T.D.S.");
            entity.Property(e => e.TransferDate).HasColumnName("Transfer Date");
            entity.Property(e => e.TransferReason).HasColumnName("Transfer Reason");
            entity.Property(e => e.Trfremark).HasColumnName("trfremark");
            entity.Property(e => e.UniversalACNumber).HasColumnName("Universal A/c Number");
        });

        modelBuilder.Entity<ShiftSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Shift_Sc__3214EC070E6E1DAE");

            entity.ToTable("Shift_Schedule");

            entity.Property(e => e.EndTime).HasColumnName("End_Time");
            entity.Property(e => e.ShiftCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Shift_Code");
            entity.Property(e => e.ShiftName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Shift_Name");
            entity.Property(e => e.StartTime).HasColumnName("Start_Time");
        });

        modelBuilder.Entity<StagingEmployee>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Staging_Employee");

            entity.Property(e => e.Dept).IsUnicode(false);
            entity.Property(e => e.Desig).IsUnicode(false);
            entity.Property(e => e.Doj).HasColumnName("doj");
            entity.Property(e => e.Ecode)
                .IsUnicode(false)
                .HasColumnName("ecode");
            entity.Property(e => e.Ename)
                .IsUnicode(false)
                .HasColumnName("ename");
            entity.Property(e => e.Gender).IsUnicode(false);
            entity.Property(e => e.Location).IsUnicode(false);
        });

        modelBuilder.Entity<StagingEmployee1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StagingEmployee");

            entity.Property(e => e.ACNo)
                .HasMaxLength(50)
                .HasColumnName("A/C NO");
            entity.Property(e => e.AadharNo)
                .HasMaxLength(20)
                .HasColumnName("AADHAR NO");
            entity.Property(e => e.BankIfscCode)
                .HasMaxLength(20)
                .HasColumnName("BANK IFSC CODE");
            entity.Property(e => e.BankName)
                .HasMaxLength(100)
                .HasColumnName("BANK NAME");
            entity.Property(e => e.Company1)
                .HasMaxLength(100)
                .HasColumnName("COMPANY 1");
            entity.Property(e => e.Company2)
                .HasMaxLength(100)
                .HasColumnName("COMPANY 2");
            entity.Property(e => e.Company3)
                .HasMaxLength(100)
                .HasColumnName("COMPANY 3");
            entity.Property(e => e.Contact1OfLast3Company)
                .HasMaxLength(15)
                .HasColumnName("CONTACT1 OF LAST 3 COMPANY");
            entity.Property(e => e.Contact2OfLast3Company1)
                .HasMaxLength(15)
                .HasColumnName("CONTACT2 OF LAST 3 COMPANY1");
            entity.Property(e => e.Contact3OfLast3Company11)
                .HasMaxLength(15)
                .HasColumnName("CONTACT3 OF LAST 3 COMPANY11");
            entity.Property(e => e.Contact4OfLast3Company11)
                .HasMaxLength(15)
                .HasColumnName("CONTACT4 OF LAST 3 COMPANY11");
            entity.Property(e => e.Contact5OfLast3Company111)
                .HasMaxLength(15)
                .HasColumnName("CONTACT5 OF LAST 3 COMPANY111");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy).HasMaxLength(100);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Doj).HasColumnName("DOJ");
            entity.Property(e => e.Ecode).HasMaxLength(20);
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(100)
                .HasColumnName("EMAIL ADDRESS");
            entity.Property(e => e.FamilyMemberDob).HasColumnName("FAMILY MEMBER DOB");
            entity.Property(e => e.FamilyMemberName)
                .HasMaxLength(100)
                .HasColumnName("FAMILY MEMBER Name");
            entity.Property(e => e.FamilyMemberRelation)
                .HasMaxLength(50)
                .HasColumnName("FAMILY MEMBER Relation");
            entity.Property(e => e.FatherSName)
                .HasMaxLength(100)
                .HasColumnName("FATHER'S NAME");
            entity.Property(e => e.FilePath)
                .HasMaxLength(255)
                .HasColumnName("FILE PATH");
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .HasColumnName("FULL NAME");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .HasColumnName("GENDER");
            entity.Property(e => e.HighestQualification)
                .HasMaxLength(100)
                .HasColumnName("HIGHEST QUALIFICATION");
            entity.Property(e => e.InHandSalary)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("In Hand Salary");
            entity.Property(e => e.Isresgined).HasColumnName("isresgined");
            entity.Property(e => e.LastCtcAnnual)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("LAST CTC(ANNUAL)");
            entity.Property(e => e.LastName).HasMaxLength(50);
            entity.Property(e => e.LastUpdatedBy).HasMaxLength(100);
            entity.Property(e => e.MaritialStatus)
                .HasMaxLength(20)
                .HasColumnName("MARITIAL STATUS");
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.Mobile)
                .HasMaxLength(15)
                .HasColumnName("MOBILE");
            entity.Property(e => e.MotherSName)
                .HasMaxLength(100)
                .HasColumnName("MOTHER'S NAME");
            entity.Property(e => e.NameOnAdhar)
                .HasMaxLength(100)
                .HasColumnName("NAME ON ADHAR");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.PanNo)
                .HasMaxLength(20)
                .HasColumnName("PAN NO");
            entity.Property(e => e.PasportSizePhoto)
                .HasMaxLength(255)
                .HasColumnName("PASPORT SIZE PHOTO");
            entity.Property(e => e.PasswordHash).HasMaxLength(100);
            entity.Property(e => e.PasswordSalt).HasMaxLength(100);
            entity.Property(e => e.PermanentAddress)
                .HasMaxLength(255)
                .HasColumnName("PERMANENT ADDRESS");
            entity.Property(e => e.PlaceOfBirth)
                .HasMaxLength(100)
                .HasColumnName("PLACE OF BIRTH");
            entity.Property(e => e.PositionHeldInPreviousCompany)
                .HasMaxLength(100)
                .HasColumnName("POSITION HELD IN PREVIOUS COMPANY");
            entity.Property(e => e.PresentAddress)
                .HasMaxLength(255)
                .HasColumnName("PRESENT ADDRESS");
            entity.Property(e => e.PresentAddressPinCode)
                .HasMaxLength(10)
                .HasColumnName("PRESENT ADDRESS PIN CODE");
            entity.Property(e => e.Reference1OfLast3Company)
                .HasMaxLength(100)
                .HasColumnName("REFERENCE1 OF LAST 3 COMPANY");
            entity.Property(e => e.Reference2OfLast3Company1)
                .HasMaxLength(100)
                .HasColumnName("REFERENCE2 OF LAST 3 COMPANY1");
            entity.Property(e => e.Reference3OfLast3Company11)
                .HasMaxLength(100)
                .HasColumnName("REFERENCE3 OF LAST 3 COMPANY11");
            entity.Property(e => e.Reference4OfLast3Company11)
                .HasMaxLength(100)
                .HasColumnName("REFERENCE4 OF LAST 3 COMPANY11");
            entity.Property(e => e.Reference5OfLast3Company111)
                .HasMaxLength(100)
                .HasColumnName("REFERENCE5 OF LAST 3 COMPANY111");
            entity.Property(e => e.Religion)
                .HasMaxLength(50)
                .HasColumnName("RELIGION");
            entity.Property(e => e.ReportHeadEcode).HasMaxLength(20);
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .HasColumnName("TITLE");
            entity.Property(e => e.Udf1)
                .HasMaxLength(100)
                .HasColumnName("UDF1");
            entity.Property(e => e.Udf2)
                .HasMaxLength(100)
                .HasColumnName("UDF2");
            entity.Property(e => e.Udf3)
                .HasMaxLength(100)
                .HasColumnName("UDF3");
            entity.Property(e => e.Udf4)
                .HasMaxLength(100)
                .HasColumnName("UDF4");
            entity.Property(e => e.Udf5)
                .HasMaxLength(100)
                .HasColumnName("UDF5");
            entity.Property(e => e.Udf6)
                .HasMaxLength(100)
                .HasColumnName("UDF6");
            entity.Property(e => e.Udf7)
                .HasMaxLength(100)
                .HasColumnName("UDF7");
            entity.Property(e => e.UpdatedBy).HasMaxLength(100);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.WorkLocation)
                .HasMaxLength(100)
                .HasColumnName("WORK LOCATION");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasKey(e => e.StateId).HasName("PK__State__C3BA3B3AD22C6E8E");

            entity.ToTable("State");

            entity.Property(e => e.StateName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Country).WithMany(p => p.States)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__State__CountryId__0B5CAFEA");
        });

        modelBuilder.Entity<Store>(entity =>
        {
            entity.HasKey(e => e.StoresId).HasName("PK__Stores__35BF9E9FDDDE8BE4");

            entity.Property(e => e.Address)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Area).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Cluster)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OpeningDate)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.OpeningMonth)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.StoreCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StoreName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Zone)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StoreLocation>(entity =>
        {
            entity.HasKey(e => e.StoreLocationsId).HasName("PK__StoreLoc__76C1E989EAA45697");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BillingOver50Lac).HasDefaultValue(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EmailId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.ErpsiteNameCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ERPSiteNameCode");
            entity.Property(e => e.Esicode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ESICode");
            entity.Property(e => e.LastupdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LocationIncharge)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NameOfLocation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Pfcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PFCode");
            entity.Property(e => e.Sapcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SAPCode");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Udf1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Udf2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Udf3)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WeeklyOff)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Zone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Location).WithMany(p => p.StoreLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_StoreLocations_Location");

            entity.HasOne(d => d.State).WithMany(p => p.StoreLocations)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__StoreLoca__State__15DA3E5D");
        });

        modelBuilder.Entity<StoreMasterBulk>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StoreMasterBulk");

            entity.Property(e => e.Cl).HasColumnName("CL");
            entity.Property(e => e.ContactNo).HasColumnName("CONTACT NO");
            entity.Property(e => e.DOB).HasColumnName("D.O.B.");
            entity.Property(e => e.DOJ).HasColumnName("D.O.J.");
            entity.Property(e => e.Deptsno).HasColumnName("DEPTSNO");
            entity.Property(e => e.Desg).HasColumnName("DESG ");
            entity.Property(e => e.Desgsno).HasColumnName("DESGSNO");
            entity.Property(e => e.EMailId).HasColumnName("E MAIL ID");
            entity.Property(e => e.EmpCode).HasColumnName("Emp Code");
            entity.Property(e => e.Goal).HasColumnName("GOAL");
            entity.Property(e => e.Grade).HasColumnName("GRADE");
            entity.Property(e => e.Kpi).HasColumnName("KPI");
            entity.Property(e => e.Kra).HasColumnName("KRA");
            entity.Property(e => e.Loc).HasColumnName("LOC");
            entity.Property(e => e.NameOfEmployee).HasColumnName("Name of Employee");
            entity.Property(e => e.Region).HasColumnName("REGION");
            entity.Property(e => e.ReportingManagerContactNo).HasColumnName("REPORTING MANAGER CONTACT NO");
            entity.Property(e => e.ReportingManagerDesg).HasColumnName("Reporting MANAGER DESG");
            entity.Property(e => e.ReportingManagerMailId).HasColumnName("REPORTING MANAGER MAIL ID");
            entity.Property(e => e.ReportingManagerNm).HasColumnName("REPORTING MANAGER NM");
            entity.Property(e => e.Seatmasterno).HasColumnName("SEATMASTERNO");
            entity.Property(e => e.Ss).HasColumnName("SS");
            entity.Property(e => e.Subdept).HasColumnName("SUBDEPT");
            entity.Property(e => e.Subdeptsno).HasColumnName("SUBDEPTSNO");
            entity.Property(e => e.Trainingcontent).HasColumnName("TRAININGCONTENT");
            entity.Property(e => e.Yesno).HasColumnName("YESNO");
        });

        modelBuilder.Entity<TblAttendanceApproval>(entity =>
        {
            entity.HasKey(e => e.ApprovalId).HasName("PK__tblAtten__328477F485E03D64");

            entity.ToTable("tblAttendanceApproval");

            entity.Property(e => e.ApproverDesg)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApproverEcode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApproverLoc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApproverName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContractEmpCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContractEmpName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContractEmpStatus)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ApproverEcodeNavigation).WithMany(p => p.TblAttendanceApprovalApproverEcodeNavigations)
                .HasPrincipalKey(p => p.Ecode)
                .HasForeignKey(d => d.ApproverEcode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Approval_Approver");

            entity.HasOne(d => d.ContractEmpCodeNavigation).WithMany(p => p.TblAttendanceApprovalContractEmpCodeNavigations)
                .HasPrincipalKey(p => p.Ecode)
                .HasForeignKey(d => d.ContractEmpCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Approval_ContractEmp");
        });

        modelBuilder.Entity<TblAttendanceRegularizationRequest>(entity =>
        {
            entity.HasKey(e => e.AttendanceRequestId).HasName("PK__tblAtten__4BF2754FB7364238");

            entity.ToTable("tblAttendanceRegularizationRequest");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FileUrl).IsUnicode(false);
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("Pending");
            entity.Property(e => e.Udf1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF1");
            entity.Property(e => e.Udf2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF2");
            entity.Property(e => e.Udf3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF3");
            entity.Property(e => e.Udf4)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF4");
            entity.Property(e => e.Udf5)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF5");
            entity.Property(e => e.Udf6)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF6");
            entity.Property(e => e.Udf7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF7");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Employee).WithMany(p => p.TblAttendanceRegularizationRequestEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK__tblAttend__Emplo__5CD6CB2B");

            entity.HasOne(d => d.ReportingManager).WithMany(p => p.TblAttendanceRegularizationRequestReportingManagers)
                .HasForeignKey(d => d.ReportingManagerId)
                .HasConstraintName("FK__tblAttend__Repor__5EBF139D");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.TblAttendanceRegularizationRequests)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_AttendanceRequest_Status");
        });

        modelBuilder.Entity<TblCompOffRequest>(entity =>
        {
            entity.HasKey(e => e.CompOffId).HasName("PK__tblCompO__AC43274D34DB1956");

            entity.ToTable("tblCompOffRequest");

            entity.Property(e => e.ApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.Reason).HasMaxLength(500);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("Pending");

            entity.HasOne(d => d.Employee).WithMany(p => p.TblCompOffRequests)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK__tblCompOf__Emplo__3D2915A8");
        });

        modelBuilder.Entity<TblCompany>(entity =>
        {
            entity.HasKey(e => e.CompanyId).HasName("PK__tblCompa__2D971CAC09A640AE");

            entity.ToTable("tblCompany");

            entity.Property(e => e.CompanyName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDcattendance>(entity =>
        {
            entity.HasKey(e => e.DcattendanceId);

            entity.ToTable("tblDCAttendance");

            entity.Property(e => e.DcattendanceId).HasColumnName("DCAttendanceId");
            entity.Property(e => e.AttendanceDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Ecode).HasMaxLength(50);
            entity.Property(e => e.SubmitOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<TblDcemployee>(entity =>
        {
            entity.HasKey(e => e.ECode);

            entity.ToTable("TBL_DCEMPLOYEES");

            entity.HasIndex(e => e.ECode, "UQ_ECODE").IsUnique();

            entity.Property(e => e.ECode)
                .HasMaxLength(255)
                .HasColumnName("E-CODE");
            entity.Property(e => e.ActInAct).HasColumnName("ACT/IN-ACT");
            entity.Property(e => e.Department)
                .HasMaxLength(255)
                .HasColumnName("DEPARTMENT");
            entity.Property(e => e.Designation)
                .HasMaxLength(255)
                .HasColumnName("DESIGNATION");
            entity.Property(e => e.EmailId).HasColumnName("EMAIL-ID");
            entity.Property(e => e.EmpName)
                .HasMaxLength(255)
                .HasColumnName("EMP-NAME");
            entity.Property(e => e.IsContract).HasColumnName("IS CONTRACT");
            entity.Property(e => e.ReportingManagerName).HasColumnName("REPORTING MANAGER NAME");
            entity.Property(e => e.RptPersonCard).HasColumnName("RPT PERSON CARD");
            entity.Property(e => e.SubDepartment)
                .HasMaxLength(255)
                .HasColumnName("SUB-DEPARTMENT");
        });

        modelBuilder.Entity<TblDepartment>(entity =>
        {
            entity.HasKey(e => e.DepartmentId).HasName("PK__tblDepar__B2079BED969804F0");

            entity.ToTable("tblDepartment");

            entity.HasIndex(e => e.DepartmentId, "IX_tblDepartment_DepartmentId").IsUnique();

            entity.HasIndex(e => e.DepartmentName, "UQ__tblDepar__D949CC340AB39FE9").IsUnique();

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DepartmentName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDesignation>(entity =>
        {
            entity.HasKey(e => e.DesignationId).HasName("PK__tblDesig__BABD60DE4C7D72F1");

            entity.ToTable("tblDesignation");

            entity.HasIndex(e => e.DesignationId, "IX_tblDesignation_DesignationId").IsUnique();

            entity.HasIndex(e => e.DesignationName, "UQ__tblDesig__372CDC2309CD82D8").IsUnique();

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DesignationName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEmpAttendance>(entity =>
        {
            entity.HasKey(e => e.EmpAttendanceId).HasName("PK__tblEmpAt__02B475A738CA81D4");

            entity.ToTable("tblEmpAttendance");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EmpCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.IsRegularize).HasDefaultValue(false);
            entity.Property(e => e.IsonLeave).HasDefaultValue(false);
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.LastUpdatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<TblEmployee>(entity =>
        {
            entity.HasKey(e => e.EmployeeId).HasName("PK__tblEmplo__7AD04F11BAB720C8");

            entity.ToTable("tblEmployee");

            entity.HasIndex(e => e.CandidateId, "IX_tblEmployee_CandidateId");

            entity.HasIndex(e => e.DepartmentId, "IX_tblEmployee_DepartmentId");

            entity.HasIndex(e => e.DesignationId, "IX_tblEmployee_DesignationId");

            entity.HasIndex(e => new { e.IsActive, e.CompanyId, e.EmployeeId }, "IX_tblEmployee_IsActive_CompanyId_EmployeeId").IsDescending(false, false, true);

            entity.HasIndex(e => e.LocationId, "IX_tblEmployee_LocationId");

            entity.HasIndex(e => e.ReportHeadEcode, "IX_tblEmployee_ReportHeadEcode");

            entity.HasIndex(e => e.Ecode, "UQ_tblEmployee_Ecode").IsUnique();

            entity.Property(e => e.ACNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("A/C NO");
            entity.Property(e => e.AadharNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AADHAR NO");
            entity.Property(e => e.ActiveInActiveRemarks).HasMaxLength(3000);
            entity.Property(e => e.AnnuallyNetCtc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("annuallyNetCTC");
            entity.Property(e => e.ApplicantCode)
                .HasMaxLength(50)
                .HasColumnName("APPLICANT CODE");
            entity.Property(e => e.ApplicantId)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.BankIfscCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BANK IFSC CODE");
            entity.Property(e => e.BankName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BANK NAME");
            entity.Property(e => e.BasicSalary).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BeneficiaryAddress)
                .HasMaxLength(500)
                .HasColumnName("BENEFICIARY_ADDRESS");
            entity.Property(e => e.Cca)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CCA");
            entity.Property(e => e.Company1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("COMPANY 1");
            entity.Property(e => e.Company2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("COMPANY 2");
            entity.Property(e => e.Company3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("COMPANY 3");
            entity.Property(e => e.Contact1OfLast3Company)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT1 OF LAST 3 COMPANY");
            entity.Property(e => e.Contact2OfLast3Company1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT2 OF LAST 3 COMPANY1");
            entity.Property(e => e.Contact3OfLast3Company11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT3 OF LAST 3 COMPANY11");
            entity.Property(e => e.Contact4OfLast3Company11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT4 OF LAST 3 COMPANY11");
            entity.Property(e => e.Contact5OfLast3Company111)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT5 OF LAST 3 COMPANY111");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Da)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DA");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Doj).HasColumnName("DOJ");
            entity.Property(e => e.Ecode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("EMAIL ADDRESS");
            entity.Property(e => e.EmpCode)
                .HasMaxLength(50)
                .HasColumnName("EMP CODE");
            entity.Property(e => e.Esicapplicable).HasColumnName("ESICApplicable");
            entity.Property(e => e.Esicno)
                .HasMaxLength(100)
                .HasColumnName("ESICNO");
            entity.Property(e => e.ExtraAllowance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FamilyMemberDob).HasColumnName("FAMILY MEMBER DOB");
            entity.Property(e => e.FamilyMemberName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILY MEMBER Name");
            entity.Property(e => e.FamilyMemberRelation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAMILY MEMBER Relation");
            entity.Property(e => e.FatherSName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FATHER'S NAME");
            entity.Property(e => e.FilePath)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FILE PATH");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FULL NAME");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GENDER");
            entity.Property(e => e.GrossSalary)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GROSS SALARY");
            entity.Property(e => e.HighestQualification)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HIGHEST QUALIFICATION");
            entity.Property(e => e.Hra)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HRA");
            entity.Property(e => e.HusbandName)
                .HasMaxLength(100)
                .HasColumnName("Husband Name");
            entity.Property(e => e.InHandSalary)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("In Hand Salary");
            entity.Property(e => e.IsAadharAttachmentUploaded).HasDefaultValue(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsBankPassbookAttachmentUpoaded).HasDefaultValue(false);
            entity.Property(e => e.IsBankStatementUploaded).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsEducationAttachmentUploaded).HasDefaultValue(false);
            entity.Property(e => e.IsPanAttachmentUploaded).HasDefaultValue(false);
            entity.Property(e => e.IsPassportPhotoUploaded).HasDefaultValue(false);
            entity.Property(e => e.IsPrevOfferLetterUploaded).HasDefaultValue(false);
            entity.Property(e => e.IsSalarySlipUploaded).HasDefaultValue(false);
            entity.Property(e => e.Isrelativeincompany).HasColumnName("ISRELATIVEINCOMPANY");
            entity.Property(e => e.Isresgined).HasColumnName("isresgined");
            entity.Property(e => e.JoiningDate).HasColumnName("JOINING DATE");
            entity.Property(e => e.LastCtcAnnual)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("LAST CTC(ANNUAL)");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaritialStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MARITIAL STATUS");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Mobile)
                .IsUnicode(false)
                .HasColumnName("MOBILE");
            entity.Property(e => e.Mobile2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MOBILE2");
            entity.Property(e => e.MonthlyGrossCtc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("monthlyGrossCTC");
            entity.Property(e => e.MotherSName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTHER'S NAME");
            entity.Property(e => e.NameOnAdhar)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NAME ON ADHAR");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.PanNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PAN NO");
            entity.Property(e => e.PasportSizePhoto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PASPORT SIZE PHOTO");
            entity.Property(e => e.PasswordHash).HasMaxLength(255);
            entity.Property(e => e.PermanentAddress)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PERMANENT ADDRESS");
            entity.Property(e => e.PermanentAddressPinCode)
                .HasMaxLength(10)
                .HasColumnName("PERMANENT ADDRESS PIN CODE");
            entity.Property(e => e.Pfapplicable).HasColumnName("PFApplicable");
            entity.Property(e => e.PlaceOfBirth)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PLACE OF BIRTH");
            entity.Property(e => e.PositionHeldInPreviousCompany)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSITION HELD IN PREVIOUS COMPANY");
            entity.Property(e => e.PresentAddress)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PRESENT ADDRESS");
            entity.Property(e => e.PresentAddressPinCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRESENT ADDRESS PIN CODE");
            entity.Property(e => e.Reference)
                .HasMaxLength(255)
                .HasColumnName("REFERENCE");
            entity.Property(e => e.Reference1OfLast3Company)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REFERENCE1  OF LAST 3 COMPANY");
            entity.Property(e => e.Reference2OfLast3Company1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REFERENCE2  OF LAST 3 COMPANY1");
            entity.Property(e => e.Reference3OfLast3Company11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REFERENCE3  OF LAST 3 COMPANY11");
            entity.Property(e => e.Reference4OfLast3Company11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REFERENCE4  OF LAST 3 COMPANY11");
            entity.Property(e => e.Reference5OfLast3Company111)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REFERENCE5  OF LAST 3 COMPANY111");
            entity.Property(e => e.Religion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RELIGION");
            entity.Property(e => e.ReportHeadEcode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SalaryExpectation).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SpecialAllowance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TITLE");
            entity.Property(e => e.TotalExperience).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UanNo).HasColumnName("UAN NO");
            entity.Property(e => e.Udf1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF1");
            entity.Property(e => e.Udf2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF2");
            entity.Property(e => e.Udf3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF3");
            entity.Property(e => e.Udf4)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF4");
            entity.Property(e => e.Udf5)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF5");
            entity.Property(e => e.Udf6)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF6");
            entity.Property(e => e.Udf7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF7");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.WeeklyOff)
                .HasMaxLength(50)
                .HasColumnName("WEEKLY OFF");
            entity.Property(e => e.WorkLocation)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORK LOCATION");

            entity.HasOne(d => d.Candidate).WithMany(p => p.TblEmployees)
                .HasForeignKey(d => d.CandidateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK__tblEmploy__Candi__45F365D3");

            entity.HasOne(d => d.Company).WithMany(p => p.TblEmployees)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_Employee_Company");

            entity.HasOne(d => d.Department).WithMany(p => p.TblEmployees)
                .HasForeignKey(d => d.DepartmentId)
                .HasConstraintName("FK__tblEmploy__Depar__1DB06A4F");

            entity.HasOne(d => d.Designation).WithMany(p => p.TblEmployees)
                .HasForeignKey(d => d.DesignationId)
                .HasConstraintName("FK__tblEmploy__Desig__1CBC4616");

            entity.HasOne(d => d.Location).WithMany(p => p.TblEmployees)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK__tblEmploy__Locat__1EA48E88");
        });

        modelBuilder.Entity<TblEmployeeActiveInActiveHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tblEmplo__3214EC07F88C7FAD");

            entity.ToTable("tblEmployeeActiveInActiveHistories");

            entity.Property(e => e.ActionPerformed).HasMaxLength(100);
            entity.Property(e => e.CreatedBy).HasMaxLength(500);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EmpId).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LeavingDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(3000);
            entity.Property(e => e.UpdatedBy).HasMaxLength(500);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblEmployeeLeaveBalance>(entity =>
        {
            entity.HasKey(e => e.EmployeeLeaveBalanceId).HasName("PK__tblEmplo__FA998A482D19B886");

            entity.ToTable("tblEmployeeLeaveBalance");

            entity.Property(e => e.Balance)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.CasualLeaveAcquired).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CasualLeaveBalance)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.CasualLeaveUsed).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CompOffAcquired).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CompOffBalance)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.CompOffUsed).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.EarnedLeaveAcquired).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.EarnedLeaveBalance)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.EarnedLeaveUsed).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.LastUpdatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MaternityLeaveAcquired).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MaternityLeaveBalance)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.MaternityLeaveUsed).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PaternityLeaveAcquired).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PaternityLeaveBalance)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.PaternityLeaveUsed).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SickLeaveAcquired).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SickLeaveBalance)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SickLeaveUsed).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Used)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.Employee).WithMany(p => p.TblEmployeeLeaveBalances)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__tblEmploy__Emplo__367C1819");
        });

        modelBuilder.Entity<TblEmployeeMultiPunch>(entity =>
        {
            entity.ToTable("tblEmployeeMultiPunches");

            entity.HasIndex(e => new { e.UserId, e.PunchDate }, "IX_tblEmployeeMultiPunches_UserID_PunchDate");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MachineType)
                .HasMaxLength(50)
                .HasColumnName("Machine_Type");
            entity.Property(e => e.Punch1).HasMaxLength(8);
            entity.Property(e => e.Punch10).HasMaxLength(8);
            entity.Property(e => e.Punch11).HasMaxLength(8);
            entity.Property(e => e.Punch12).HasMaxLength(8);
            entity.Property(e => e.Punch2).HasMaxLength(8);
            entity.Property(e => e.Punch3).HasMaxLength(8);
            entity.Property(e => e.Punch4).HasMaxLength(8);
            entity.Property(e => e.Punch5).HasMaxLength(8);
            entity.Property(e => e.Punch6).HasMaxLength(8);
            entity.Property(e => e.Punch7).HasMaxLength(8);
            entity.Property(e => e.Punch8).HasMaxLength(8);
            entity.Property(e => e.Punch9).HasMaxLength(8);
            entity.Property(e => e.TotalHours)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TblEmployeeMultiPunchesBackup03062025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblEmployeeMultiPunches_backup_03062025");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.LastUpdatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MachineType)
                .HasMaxLength(50)
                .HasColumnName("Machine_Type");
            entity.Property(e => e.Punch1).HasMaxLength(8);
            entity.Property(e => e.Punch10).HasMaxLength(8);
            entity.Property(e => e.Punch11).HasMaxLength(8);
            entity.Property(e => e.Punch12).HasMaxLength(8);
            entity.Property(e => e.Punch2).HasMaxLength(8);
            entity.Property(e => e.Punch3).HasMaxLength(8);
            entity.Property(e => e.Punch4).HasMaxLength(8);
            entity.Property(e => e.Punch5).HasMaxLength(8);
            entity.Property(e => e.Punch6).HasMaxLength(8);
            entity.Property(e => e.Punch7).HasMaxLength(8);
            entity.Property(e => e.Punch8).HasMaxLength(8);
            entity.Property(e => e.Punch9).HasMaxLength(8);
            entity.Property(e => e.TotalHours)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TblEmployeeMultiPunchesCleaned>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblEmployeeMultiPunches_Cleaned");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);
            entity.Property(e => e.MachineType)
                .HasMaxLength(50)
                .HasColumnName("Machine_Type");
            entity.Property(e => e.Punch1).HasMaxLength(8);
            entity.Property(e => e.Punch10).HasMaxLength(8);
            entity.Property(e => e.Punch11).HasMaxLength(8);
            entity.Property(e => e.Punch12).HasMaxLength(8);
            entity.Property(e => e.Punch2).HasMaxLength(8);
            entity.Property(e => e.Punch3).HasMaxLength(8);
            entity.Property(e => e.Punch4).HasMaxLength(8);
            entity.Property(e => e.Punch5).HasMaxLength(8);
            entity.Property(e => e.Punch6).HasMaxLength(8);
            entity.Property(e => e.Punch7).HasMaxLength(8);
            entity.Property(e => e.Punch8).HasMaxLength(8);
            entity.Property(e => e.Punch9).HasMaxLength(8);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TblEmployeeMultiPunchesTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblEmployeeMultiPunches_temp");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.LastUpdatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MachineType)
                .HasMaxLength(50)
                .HasColumnName("Machine_Type");
            entity.Property(e => e.Punch1).HasMaxLength(8);
            entity.Property(e => e.Punch10).HasMaxLength(8);
            entity.Property(e => e.Punch11).HasMaxLength(8);
            entity.Property(e => e.Punch12).HasMaxLength(8);
            entity.Property(e => e.Punch2).HasMaxLength(8);
            entity.Property(e => e.Punch3).HasMaxLength(8);
            entity.Property(e => e.Punch4).HasMaxLength(8);
            entity.Property(e => e.Punch5).HasMaxLength(8);
            entity.Property(e => e.Punch6).HasMaxLength(8);
            entity.Property(e => e.Punch7).HasMaxLength(8);
            entity.Property(e => e.Punch8).HasMaxLength(8);
            entity.Property(e => e.Punch9).HasMaxLength(8);
            entity.Property(e => e.TotalHours)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TblEmployeePunch>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.PunchDate, e.PunchTime });

            entity.ToTable("tblEmployeePunches");

            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .HasColumnName("UserID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdatedBy)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TblEmployeeRole>(entity =>
        {
            entity.HasKey(e => e.EmployeeRoleId).HasName("PK__tblEmplo__346186E60C3196D1");

            entity.ToTable("tblEmployeeRole");

            entity.HasIndex(e => new { e.EmployeeId, e.RoleId }, "UQ_Employee_Role").IsUnique();

            entity.Property(e => e.AssignedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AssignedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Employee).WithMany(p => p.TblEmployeeRoles)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employee");

            entity.HasOne(d => d.Role).WithMany(p => p.TblEmployeeRoles)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_Role");
        });

        modelBuilder.Entity<TblExperience>(entity =>
        {
            entity.ToTable("tblExperience");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Cid).HasColumnName("CID");
            entity.Property(e => e.CreatedBy).HasMaxLength(300);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.InHand).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LastCtc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Last CTC");
            entity.Property(e => e.NameOfCompany)
                .HasMaxLength(500)
                .HasColumnName("Name of Company");
            entity.Property(e => e.PositionHeld)
                .HasMaxLength(500)
                .HasColumnName("Position Held");
            entity.Property(e => e.UpdatedBy).HasMaxLength(500);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.WorkLocation)
                .HasMaxLength(500)
                .HasColumnName("Work Location");
        });

        modelBuilder.Entity<TblFamily>(entity =>
        {
            entity.ToTable("tblFamily");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Cid).HasColumnName("CID");
            entity.Property(e => e.CreatedBy).HasMaxLength(300);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.FamilyMemberName)
                .HasMaxLength(500)
                .HasColumnName("Family Member Name");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Relation).HasMaxLength(500);
            entity.Property(e => e.UpdatedBy).HasMaxLength(500);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblLeavePolicy>(entity =>
        {
            entity.HasKey(e => e.LeavePolicyId).HasName("PK__tblLeave__20E59E58398F7DCA");

            entity.ToTable("tblLeavePolicy");

            entity.Property(e => e.ApplicableFor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsCarryForward).HasDefaultValue(false);
            entity.Property(e => e.LeavesPerMonth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.MaxLeavesPerYear).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.PolicyName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LeaveType).WithMany(p => p.TblLeavePolicies)
                .HasForeignKey(d => d.LeaveTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__tblLeaveP__Leave__31B762FC");
        });

        modelBuilder.Entity<TblLeaveRequest>(entity =>
        {
            entity.HasKey(e => e.LeaveRequestId).HasName("PK__tblLeave__609421EE72F1CD85");

            entity.ToTable("tblLeaveRequest");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsRevoked).HasDefaultValue(false);
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Udf1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF1");
            entity.Property(e => e.Udf2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF2");
            entity.Property(e => e.Udf3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF3");
            entity.Property(e => e.Udf4)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF4");
            entity.Property(e => e.Udf5)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF5");
            entity.Property(e => e.Udf6)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF6");
            entity.Property(e => e.Udf7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF7");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Employee).WithMany(p => p.TblLeaveRequestEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK__tblLeaveR__Emplo__571DF1D5");

            entity.HasOne(d => d.LeaveType).WithMany(p => p.TblLeaveRequests)
                .HasForeignKey(d => d.LeaveTypeId)
                .HasConstraintName("FK__tblLeaveR__Leave__2A164134");

            entity.HasOne(d => d.ReportingManager).WithMany(p => p.TblLeaveRequestReportingManagers)
                .HasForeignKey(d => d.ReportingManagerId)
                .HasConstraintName("FK__tblLeaveR__Repor__59063A47");

            entity.HasOne(d => d.Status).WithMany(p => p.TblLeaveRequests)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_tblLeaveRequest_tblStatus");
        });

        modelBuilder.Entity<TblLeaveType>(entity =>
        {
            entity.HasKey(e => e.LeaveTypeId).HasName("PK__tblLeave__43BE8F14DD864467");

            entity.ToTable("tblLeaveType");

            entity.HasIndex(e => e.LeaveTypeName, "UQ__tblLeave__E6D8DFABAF63DD4E").IsUnique();

            entity.Property(e => e.LeaveTypeName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblLocation>(entity =>
        {
            entity.HasKey(e => e.LocationId).HasName("PK__tblLocat__E7FEA497855B00D6");

            entity.ToTable("tblLocation");

            entity.HasIndex(e => e.LocationId, "IX_tblLocation_LocationId").IsUnique();

            entity.HasIndex(e => e.LocationName, "UQ__tblLocat__F946BB84F819FA16").IsUnique();

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LocationName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Stcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STCode");

            entity.HasOne(d => d.State).WithMany(p => p.TblLocations)
                .HasForeignKey(d => d.StateId)
                .HasConstraintName("FK_tblLocation_tblState");
        });

        modelBuilder.Entity<TblManualDeleteNikhil>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Tbl_Manual_delete_Nikhil");

            entity.Property(e => e.ACNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("A/C NO");
            entity.Property(e => e.AadharNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AADHAR NO");
            entity.Property(e => e.ActiveInActiveRemarks).HasMaxLength(3000);
            entity.Property(e => e.AnnuallyNetCtc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("annuallyNetCTC");
            entity.Property(e => e.ApplicantCode)
                .HasMaxLength(50)
                .HasColumnName("APPLICANT CODE");
            entity.Property(e => e.ApplicantId)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.BankIfscCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BANK IFSC CODE");
            entity.Property(e => e.BankName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BANK NAME");
            entity.Property(e => e.BasicSalary).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BeneficiaryAddress)
                .HasMaxLength(500)
                .HasColumnName("BENEFICIARY_ADDRESS");
            entity.Property(e => e.Cca)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CCA");
            entity.Property(e => e.Company1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("COMPANY 1");
            entity.Property(e => e.Company2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("COMPANY 2");
            entity.Property(e => e.Company3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("COMPANY 3");
            entity.Property(e => e.Contact1OfLast3Company)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT1 OF LAST 3 COMPANY");
            entity.Property(e => e.Contact2OfLast3Company1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT2 OF LAST 3 COMPANY1");
            entity.Property(e => e.Contact3OfLast3Company11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT3 OF LAST 3 COMPANY11");
            entity.Property(e => e.Contact4OfLast3Company11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT4 OF LAST 3 COMPANY11");
            entity.Property(e => e.Contact5OfLast3Company111)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACT5 OF LAST 3 COMPANY111");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Da)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DA");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Doj).HasColumnName("DOJ");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("EMAIL ADDRESS");
            entity.Property(e => e.EmpCode)
                .HasMaxLength(50)
                .HasColumnName("EMP CODE");
            entity.Property(e => e.EmployeeId).ValueGeneratedOnAdd();
            entity.Property(e => e.Esicapplicable).HasColumnName("ESICApplicable");
            entity.Property(e => e.Esicno)
                .HasMaxLength(100)
                .HasColumnName("ESICNO");
            entity.Property(e => e.ExtraAllowance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FamilyMemberDob).HasColumnName("FAMILY MEMBER DOB");
            entity.Property(e => e.FamilyMemberName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAMILY MEMBER Name");
            entity.Property(e => e.FamilyMemberRelation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAMILY MEMBER Relation");
            entity.Property(e => e.FatherSName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FATHER'S NAME");
            entity.Property(e => e.FilePath)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FILE PATH");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FULL NAME");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GENDER");
            entity.Property(e => e.GrossSalary)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GROSS SALARY");
            entity.Property(e => e.HighestQualification)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HIGHEST QUALIFICATION");
            entity.Property(e => e.Hra)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HRA");
            entity.Property(e => e.InHandSalary)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("In Hand Salary");
            entity.Property(e => e.Isrelativeincompany).HasColumnName("ISRELATIVEINCOMPANY");
            entity.Property(e => e.Isresgined).HasColumnName("isresgined");
            entity.Property(e => e.JoiningDate).HasColumnName("JOINING DATE");
            entity.Property(e => e.LastCtcAnnual)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("LAST CTC(ANNUAL)");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaritialStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MARITIAL STATUS");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Mobile)
                .IsUnicode(false)
                .HasColumnName("MOBILE");
            entity.Property(e => e.Mobile2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MOBILE2");
            entity.Property(e => e.MonthlyGrossCtc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("monthlyGrossCTC");
            entity.Property(e => e.MotherSName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTHER'S NAME");
            entity.Property(e => e.NameOnAdhar)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NAME ON ADHAR");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.PanNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PAN NO");
            entity.Property(e => e.PasportSizePhoto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PASPORT SIZE PHOTO");
            entity.Property(e => e.PasswordHash).HasMaxLength(255);
            entity.Property(e => e.PermanentAddress)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PERMANENT ADDRESS");
            entity.Property(e => e.PermanentAddressPinCode)
                .HasMaxLength(10)
                .HasColumnName("PERMANENT ADDRESS PIN CODE");
            entity.Property(e => e.Pfapplicable).HasColumnName("PFApplicable");
            entity.Property(e => e.PlaceOfBirth)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PLACE OF BIRTH");
            entity.Property(e => e.PositionHeldInPreviousCompany)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSITION HELD IN PREVIOUS COMPANY");
            entity.Property(e => e.PresentAddress)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PRESENT ADDRESS");
            entity.Property(e => e.PresentAddressPinCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PRESENT ADDRESS PIN CODE");
            entity.Property(e => e.Reference)
                .HasMaxLength(255)
                .HasColumnName("REFERENCE");
            entity.Property(e => e.Reference1OfLast3Company)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REFERENCE1  OF LAST 3 COMPANY");
            entity.Property(e => e.Reference2OfLast3Company1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REFERENCE2  OF LAST 3 COMPANY1");
            entity.Property(e => e.Reference3OfLast3Company11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REFERENCE3  OF LAST 3 COMPANY11");
            entity.Property(e => e.Reference4OfLast3Company11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REFERENCE4  OF LAST 3 COMPANY11");
            entity.Property(e => e.Reference5OfLast3Company111)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REFERENCE5  OF LAST 3 COMPANY111");
            entity.Property(e => e.Religion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RELIGION");
            entity.Property(e => e.ReportHeadEcode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SalaryExpectation).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SpecialAllowance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TITLE");
            entity.Property(e => e.TotalExperience).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UanNo).HasColumnName("UAN NO");
            entity.Property(e => e.Udf1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF1");
            entity.Property(e => e.Udf2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF2");
            entity.Property(e => e.Udf3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF3");
            entity.Property(e => e.Udf4)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF4");
            entity.Property(e => e.Udf5)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF5");
            entity.Property(e => e.Udf6)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF6");
            entity.Property(e => e.Udf7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF7");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.WeeklyOff)
                .HasMaxLength(50)
                .HasColumnName("WEEKLY OFF");
            entity.Property(e => e.WorkLocation)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WORK LOCATION");
        });

        modelBuilder.Entity<TblNewCandidateApproval>(entity =>
        {
            entity.HasKey(e => e.ApprovalId).HasName("PK__tblNewCa__328477F4EC420F9D");

            entity.ToTable("tblNewCandidateApproval");

            entity.Property(e => e.AuditReviewedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ClusterManagerReviewBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HrapprovalStatus).HasColumnName("HRApprovalStatus");
            entity.Property(e => e.HrreviewedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HRReviewedBy");
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Udf1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF1");
            entity.Property(e => e.Udf2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF2");
            entity.Property(e => e.Udf3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF3");
            entity.Property(e => e.Udf4)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF4");
            entity.Property(e => e.Udf5)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF5");
            entity.Property(e => e.Udf6)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF6");
            entity.Property(e => e.Udf7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF7");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.AuditApprovalStatusNavigation).WithMany(p => p.TblNewCandidateApprovalAuditApprovalStatusNavigations)
                .HasForeignKey(d => d.AuditApprovalStatus)
                .HasConstraintName("FK_AuditApprovalStatus");

            entity.HasOne(d => d.Candidate).WithMany(p => p.TblNewCandidateApprovals)
                .HasForeignKey(d => d.CandidateId)
                .HasConstraintName("FK__tblNewCan__Candi__534D60F1");

            entity.HasOne(d => d.HrapprovalStatusNavigation).WithMany(p => p.TblNewCandidateApprovalHrapprovalStatusNavigations)
                .HasForeignKey(d => d.HrapprovalStatus)
                .HasConstraintName("FK_HRApprovalStatus");
        });

        modelBuilder.Entity<TblQualification>(entity =>
        {
            entity.ToTable("tblQualification");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Cid).HasColumnName("CID");
            entity.Property(e => e.CreatedBy).HasMaxLength(300);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Education).HasMaxLength(500);
            entity.Property(e => e.Grade).HasMaxLength(500);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Type).HasMaxLength(500);
            entity.Property(e => e.UpdatedBy).HasMaxLength(500);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.Yop)
                .HasMaxLength(500)
                .HasColumnName("YOP");
        });

        modelBuilder.Entity<TblRegion>(entity =>
        {
            entity.HasKey(e => e.RegionId).HasName("PK__tblRegio__ACD844A3F6D61D4E");

            entity.ToTable("tblRegion");

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RegionName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<TblRole>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__tblRole__8AFACE1AF23AC4E0");

            entity.ToTable("tblRole");

            entity.HasIndex(e => e.RoleName, "UQ__tblRole__8A2B61603CC0BA8F").IsUnique();

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Udf1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF1");
            entity.Property(e => e.Udf2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF2");
            entity.Property(e => e.Udf3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF3");
            entity.Property(e => e.Udf4)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF4");
            entity.Property(e => e.Udf5)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF5");
            entity.Property(e => e.Udf6)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF6");
            entity.Property(e => e.Udf7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("UDF7");
        });

        modelBuilder.Entity<TblState>(entity =>
        {
            entity.HasKey(e => e.StateId).HasName("PK__tblState__C3BA3B3AEB218384");

            entity.ToTable("tblState");

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.StateName)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Region).WithMany(p => p.TblStates)
                .HasForeignKey(d => d.RegionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__tblState__Region__7EC1CEDB");
        });

        modelBuilder.Entity<TblStatus>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__tblStatu__C8EE20631F20BA81");

            entity.ToTable("tblStatus");

            entity.HasIndex(e => e.StatusName, "UQ__tblStatu__05E7698A18F4DF43").IsUnique();

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblStoreBudget>(entity =>
        {
            entity.HasKey(e => e.StoreBudgetId).HasName("PK__tblStore__79C0B6C01C9CA2F7");

            entity.ToTable("tblStoreBudget");

            entity.Property(e => e.BudgetAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastupdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Udf1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Udf2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Udf3)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Designation).WithMany(p => p.TblStoreBudgets)
                .HasForeignKey(d => d.DesignationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__tblStoreB__Desig__2334397B");

            entity.HasOne(d => d.StoreLocations).WithMany(p => p.TblStoreBudgets)
                .HasForeignKey(d => d.StoreLocationsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__tblStoreB__Store__22401542");
        });

        modelBuilder.Entity<TblTravelRequest>(entity =>
        {
            entity.HasKey(e => e.TravelRequestId).HasName("PK__tblTrave__A5BAB84835365D79");

            entity.ToTable("tblTravelRequest");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrentStatus)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IdproofFilePath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("IDProofFilePath");
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LocationFrom)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LocationTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModeOfTravel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PurposeOfVisit)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RecommendedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.Employee).WithMany(p => p.TblTravelRequests)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TravelRequest_Employee");
        });

        modelBuilder.Entity<TempEcode>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.StMngmt).HasColumnName("ST_MNGMT.");
        });

        modelBuilder.Entity<TempEmpAttendance>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempEmpAttendance");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EmpCode).HasMaxLength(50);
            entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);
        });

        modelBuilder.Entity<TempEmployeePunch>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => new { e.UserId, e.PunchDate }, "IX_TempEmployeePunches_UserID_PunchDate");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MachineType)
                .HasMaxLength(50)
                .HasColumnName("Machine_Type");
            entity.Property(e => e.Punch1).HasMaxLength(8);
            entity.Property(e => e.Punch10).HasMaxLength(8);
            entity.Property(e => e.Punch11).HasMaxLength(8);
            entity.Property(e => e.Punch12).HasMaxLength(8);
            entity.Property(e => e.Punch2).HasMaxLength(8);
            entity.Property(e => e.Punch3).HasMaxLength(8);
            entity.Property(e => e.Punch4).HasMaxLength(8);
            entity.Property(e => e.Punch5).HasMaxLength(8);
            entity.Property(e => e.Punch6).HasMaxLength(8);
            entity.Property(e => e.Punch7).HasMaxLength(8);
            entity.Property(e => e.Punch8).HasMaxLength(8);
            entity.Property(e => e.Punch9).HasMaxLength(8);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpEmployeeUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpEmployeeUpdate");

            entity.Property(e => e.EmployeeCode).HasColumnName("Employee Code");
            entity.Property(e => e.JoinedLocation).HasColumnName("Joined Location");
            entity.Property(e => e.NameOfEmployee).HasColumnName("Name of Employee");
            entity.Property(e => e.PostedLocation).HasColumnName("Posted Location");
        });

        modelBuilder.Entity<TravelMode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TravelMo__3214EC079BC75BC7");

            entity.ToTable("TravelMode");

            entity.Property(e => e.TravelBy)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TravelRequest>(entity =>
        {
            entity.HasKey(e => e.TrvalId).HasName("PK__TravelRe__05F1DCDC131066F0");

            entity.ToTable("TravelRequest");

            entity.Property(e => e.ApproveStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Destination)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.VisitPurpose)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TravelRequestAction>(entity =>
        {
            entity.HasKey(e => e.TravelRequestActionId).HasName("PK__TravelRe__093291E1AB24FC85");

            entity.ToTable("TravelRequestAction");

            entity.Property(e => e.AdminRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Hodremarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("HODRemarks");
            entity.Property(e => e.IsApprovedByHod).HasColumnName("IsApprovedByHOD");
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.TravelRequest).WithMany(p => p.TravelRequestActions)
                .HasForeignKey(d => d.TravelRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TravelRequestAction_TravelRequest");
        });

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}